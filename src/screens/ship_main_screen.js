// Generated by CoffeeScript 1.6.1
(function() {
  var PlayerShip;

  game.ShipMainScreen = cc.LayerColor.extend({
    _shipSprite: null,
    ctor: function() {
      this._super(new cc.Color4B(0, 0, 0, 255));
      this._shipSprite = new PlayerShip();
      this.setTouchEnabled(true);
      this.setKeyboardEnabled(true);
      this.setPosition(new cc.Point(0, 0));
      this.addChild(this._shipSprite);
      this._shipSprite.scheduleUpdate();
      this.schedule(this.update);
      return true;
    },
    onEnter: function() {
      return this._super();
    },
    update: function(dt) {},
    onTouchesEnded: function(pTouch, pEvent) {},
    onTouchesMoved: function(pTouch, pEvent) {
      return this._shipSprite.handleTouchMove(pTouch[0].getLocation());
    },
    onKeyUp: function(e) {},
    onKeyDown: function(e) {
      return this._shipSprite.handleKey(e);
    }
  });

  game.ShipMainScreenScene = cc.Scene.extend({
    onEnter: function() {
      this._super();
      return this.addChild(new game.ShipMainScreen());
    }
  });

  PlayerShip = cc.Sprite.extend({
    ROTATION_VECTOR: 15,
    MOVEMENT_VECTOR: 0,
    _currentRotation: 90,
    _position: null,
    _size: null,
    ctor: function() {
      this._super();
      this.initWithFile(s_Ship_Stationary);
      this._size = cc.Director.getInstance().getWinSize();
      this._position = new cc.Point(this._size.width / 2, this._size.height / 2);
      return this.setPosition(this._position);
    },
    update: function(dt) {
      this.setRotation(this._currentRotation - 90);
      return this.moveShip();
    },
    handleKey: function(e) {
      if (e === cc.KEY.left) {
        this._currentRotation = this._currentRotation - this.ROTATION_VECTOR;
      }
      if (e === cc.KEY.right) {
        this._currentRotation = this._currentRotation + this.ROTATION_VECTOR;
      }
      if (e === cc.KEY.up) {
        this.MOVEMENT_VECTOR += 1;
      }
      if (e === cc.KEY.down) {
        this.MOVEMENT_VECTOR -= 1;
      }
      if (this.MOVEMENT_VECTOR > 10) {
        this.MOVEMENT_VECTOR = 10;
      }
      if (this.MOVEMENT_VECTOR < -10) {
        this.MOVEMENT_VECTOR = -10;
      }
      if (this._currentRotation < 0) {
        this._currentRotation = 360;
      }
      if (this._currentRotation > 360) {
        return this._currentRotation = 0;
      }
    },
    handleTouchMove: function(touchLocation) {
      var angle;
      angle = Math.atan2(touchLocation.x - 300, touchLocation.y - 300);
      angle = angle * (180 / Math.PI);
      return this._currentRotation = angle;
    },
    moveShip: function() {
      var xChange, yChange;
      xChange = this.MOVEMENT_VECTOR * Math.cos(this._currentRotation * Math.PI / 180);
      yChange = this.MOVEMENT_VECTOR * Math.sin(this._currentRotation * Math.PI / 180);
      this._position.x -= xChange;
      this._position.y += yChange;
      this.sanitizeX();
      this.sanitizeY();
    },
    sanitizeX: function() {
      var maxX;
      maxX = this._size.width + this.getBoundingBox().width / 2;
      if (this._position.x > maxX) {
        this._position.x = this._position.x % maxX;
      }
      if (this._position.x < -this.getBoundingBox().width / 2) {
        return this._position.x = maxX;
      }
    },
    sanitizeY: function() {
      var maxY;
      maxY = this._size.height + this.getBoundingBox().height / 2;
      if (this._position.y > maxY) {
        this._position.y = this._position.y % maxY;
      }
      if (this._position.y < -this.getBoundingBox().height / 2) {
        return this._position.y = maxY;
      }
    }
  });

}).call(this);
